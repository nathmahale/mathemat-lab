name: Build and Push Docker Image

on:
  push:
    branches: [ "dev" ]
    paths:
      - azuredevops/build-agent-docker/**
      - .github/workflows/ado-agent-image-build.yml
    tags: [ "v*" ] # build on version tags

jobs:
  adoDockerImageBuildJob:
    if: |
      github.event.head_commit.message != 'test' &&
      github.event.head_commit.message != 'cosmetic changes' &&
      github.event.head_commit.message != 'code fmt'
    name: adoDockerImageBuildJob
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (SOPS, age, yq)
        run: |
          sudo apt-get update
          sudo apt install age -y
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64
          chmod +x /usr/local/bin/yq
          SOPS_LATEST=$(curl -s "https://api.github.com/repos/getsops/sops/releases/latest" \
            | grep -Po '"tag_name": "\Kv?[0-9.]+' )
          curl -LO "https://github.com/getsops/sops/releases/download/${SOPS_LATEST}/sops-${SOPS_LATEST}.linux.amd64"
          sudo mv "sops-${SOPS_LATEST}.linux.amd64" /usr/local/bin/sops
          sudo chmod +x /usr/local/bin/sops
          command -v sops && sops --version --check-for-updates

      - name: Decrypt SOPS file with age in memory
        id: decrypt
        env:
          SOPS_AGE_KEY: ${{ secrets.AGE_KEY }}
        run: |
          export DOCKER_USERNAME=$(sops decrypt --extract '["dockerhub"]["username"]' secrets.enc.yaml | yq .)
          export DOCKER_PAT=$(sops decrypt --extract '["dockerhub"]["pat"]' secrets.enc.yaml | yq .)
          echo "$DOCKERHUB_PAT" | docker login -u "$DOCKERHUB_USER" --password-stdin
        working-directory: ./azuredevops/build-agent-docker
      
      - name: Set version tags
        id: versiontags
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}" # strip leading "v"
            MAJOR=$(echo $VERSION | cut -d. -f1)
            MINOR=$(echo $VERSION | cut -d. -f2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
            echo "MINOR=$MINOR" >> $GITHUB_OUTPUT
            echo "PATCH=$PATCH" >> $GITHUB_OUTPUT
          fi

      - name: Scrape build info
        id: vars
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
          echo "COMMIT_SHORT_SHA=${GITHUB_SHA:0:6}" >> $GITHUB_OUTPUT
        
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          no-cache: true
          tags: |
            azure-devops-linux-agent:scm-sha-${{ steps.vars.outputs.COMMIT_SHORT_SHA }},
            fun-lab
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_VERSION_TAG=${{ steps.vars.outputs.RELEASE_VERSION }}
            GIT_COMMIT_MESSAGE=${{ github.event.head_commit.message }}
            GIT_VERSION_HASH=${{ github.sha }}
          platforms: linux/arm64
          context: ./azuredevops/build-agent-docker
          file: ./azuredevops/build-agent-docker/Dockerfile
        
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: release-images.txt
